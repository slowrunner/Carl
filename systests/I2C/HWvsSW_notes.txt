HW vs SW I2C Notes

=== Nov 2020 Investigation ===
PiOS based Raspbian For Robots 17 Oct 2020 beta release
No Change to DI_Sensors from 17Feb2019 version

Test1: Regular Operation on beta OS release
- Distance Sensor in HW I2C mode
- IMU in SW I2C mode
- Running: juicer, imulog, wheellog, lifelog
- imulog (SW I2C) failed after 26 hours
- juicer detected fatal I2C failure on HW I2C after 95 hours operation

Test2: Regular Operation w/o using SW I2C/IMU on beta OS
- Distance Sensor in HW I2C mode
- imulog invocation prevented in crontab-e
- Running: juicer, wheellog, lifelog and numerous TensorFlow Lite gpg_classify_picamera.py
- (No USB WiFi dongle - giving 8.3h "playtime" vs 6.4h with)
- No fatal errors detected in 115 hours

Test3: Add HW I2C stress on Distance Sensor
- Distance Sensor in HW I2C mode
- imulog invocation prevented in crontab-e
- Running: juicer, wheellog, lifelog and numerous TensorFlow Lite gpg_classify_picamera.py
- Running: HWDistanceSensor.py
- (No USB WiFi dongle - giving 8.3h "playtime" vs 6.4h with)
- No fatal errors detected in 22 hrs, 328k extra HW I2C readings of distance sensor

Test4: Add SW I2C traffic 
- Distance Sensor in HW I2C mode
- imulog invocation prevented in crontab-e
- Running: juicer, wheellog, lifelog, status.py perfoms distance sensor readings every six seconds
- Running: SW_I2C_Stress_with_IMU.py  - over 1 million reads with 62 soft errors, no hard failures
- (No USB WiFi dongle - giving 8.3h "playtime" vs 6.4h with)

Test5: Add SW I2C traffic 
- Distance Sensor in HW I2C mode
- imulog invocation prevented in crontab-e
- Running: juicer, wheellog, lifelog, 
- Running: SW_I2C_Stress_with_IMU.py (10 readings / second), HWDistanceSensor.py (10 readings / second)
- (No USB WiFi dongle - giving 8.3h "playtime" vs 6.4h with)
 

=== June 27 2019 Investigation ===

Stretch based Raspbian For Robots 5 Apr 2019 release
17Feb2019 version DI_Sensors/Python/di_sensors/distance_sensor.py  "Switch to di_i2c and default to RPI_1SW"
(I performed DI software update on 22June2019)




SW I2C Runs:


** 2 in 984 calls  (0.2%):

17:45:01 969:distance from object: 47 mm
17:45:01 970:distance from object: 47 mm
[Errno 5] Input/output error
[Errno 5] Input/output error
17:45:01 971:distance from object: 47 mm
17:45:02 972:distance from object: 47 mm

** 23 in 13265 calls in 1hr (0.17%) **


** 1 in 651 calls (0.15%):
17:57:39 621:I2C_1SW distance from object: 47 mm
[Errno 5] Input/output error
17:57:40 622:I2C_1SW distance from object: 47 mm

** 2 in 854 calls (0.23%):

18:00:54 303:distance from object: 48 mm
[Errno 5] Input/output error
18:00:55 304:distance from object: 48 mm

18:02:37 677:distance from object: 47 mm
[Errno 5] Input/output error
18:02:37 678:distance from object: 48 mm

SW.out:
*** 1 Errno 5 every 2 minutes (0.2%) then continuous after 38m
     22 in 9653 before failed, tested 85679 calls

*** 228097  in 313777 calls in 3 hours (72.7%) on the charger ***
continuous errors from 2h22m.  

When I killed that process and tried to init a new distance sensor (I2C port hosed):
Traceback (most recent call last):
  File "HWDistanceSensor.py", line 20, in <module>
    my_sensor = EasyDistanceSensor(use_mutex=True, port='RPI_1')
  File "/usr/local/lib/python3.5/dist-packages/DI_Sensors-1.0.0-py3.5.egg/di_sensors/easy_distance_sensor.py", line 56, in __init__
  File "/usr/local/lib/python3.5/dist-packages/DI_Sensors-1.0.0-py3.5.egg/di_sensors/distance_sensor.py", line 28, in __init__
  File "/usr/local/lib/python3.5/dist-packages/DI_Sensors-1.0.0-py3.5.egg/di_sensors/VL53L0X.py", line 126, in __init__
  File "/usr/local/lib/python3.5/dist-packages/Dexter_AutoDetection_and_I2C_Mutex-0.0.0-py3.5.egg/di_i2c.py", line 220, in write_reg_8
  File "/usr/local/lib/python3.5/dist-packages/Dexter_AutoDetection_and_I2C_Mutex-0.0.0-py3.5.egg/di_i2c.py", line 177, in transfer
  File "/usr/local/lib/python3.5/dist-packages/python_periphery-1.1.0-py3.5.egg/periphery/i2c.py", line 133, in transfer
periphery.i2c.I2CError: [Errno 121] I2C transfer: Remote I/O error


# ### ANALYSIS

# INITIAL RESULTS - HW vs SW I2C

Analysis of the software I2C port lockup that disabled Carl on June 25th:

1) First I2C Errno 5 occurred off the charging dock (not charging), after 15 minutes operation, and was a single occurrence at 8.5v 8.6v peak in prior 5 minutes.

2) Second and third I2C Errno 5 events occurred while charging, after 2h and 2h22m operation, and were single occurrences at 11.5v 12v peak and 9.6v 15v peak respectively

3) Continuous I2C Errno 5 began while charging, after 2h46m operation, at 11.8v with 13.5v peak in the prior 5 minutes.

Given that Carl ran almost 24 hours a day for two months using hardware I2C for the distance sensor, and saw his first fatal I2C occurrence, on the charger and 
after updating which uses software I2C for the same code, battery, and charger, I began questioning if the software I2C could be sensitive 
to the charging voltage spikes seen in my very "off label" use of the GoPiGo3.

Repeated runs of SWDistanceSensor.py that uses software I2C exhibit a 0.2% Errno 5 Input/output error rate,
and eventual complete non-recoverable GoPiGo3 I2C lockup that can only be corrected by total shutdown and coldstart.

I ran the hardware I2C Distance Sensor test for over seven hours, including two charging sessions, and 
juicer.py (in HW I2C mode checking distance sensor every 12 seconds), 
and did not see a single Errno 5.  This is conclusive.

08:06  Start Test
09:48  Manual Dock Recharge Start
11:02  Manual UnDock Discharging Start
15:16  7h10m No Errno 5 events in 106K calls by HWDistanceSensor.py 
       (juicer.py also using DistanceSensor via HW I2C every 12 seconds)

This is operating outside the design parameters of the GoPiGo3, so my analysis should not be taken as a complaint or fault.

I thank DI for including the "considerably less reliable" RPI_1 hardware I2C configuration when making changes intended to improve the product and reduce support incidents.  
I believe for Carl's  circumstances returning to using hardware I2C will get him back to managing his own battery charge level. 
